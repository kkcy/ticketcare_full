// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model (core entity for all roles)
model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  sessions      Session[]
  accounts      Account[]
  role          Role? // ADMIN, CUSTOMER, ORGANIZER
  banned        Boolean?  @default(false)
  banReason     String?   @map("ban_reason")
  banExpires    DateTime? @map("ban_expires")

  // Relationships
  organizer      Organizer? // A User can be an Organizer
  orders         Order[] // A User can place orders (customer role)
  carts          Cart[] // A User can have carts (customer role)
  approvedEvents Event[]    @relation("ApprovedBy") // Admin approves events

  @@map("user")
}

// Session model 
model Session {
  id             String   @id
  expiresAt      DateTime @map("expires_at")
  token          String   @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  ipAddress      String?  @map("ip_address")
  userAgent      String?  @map("user_agent")
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?  @map("impersonated_by")

  @@map("session")
}

// Account model 
model Account {
  id                    String    @id
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("account")
}

// Verification model
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@map("verification")
}

// Organizer model
model Organizer {
  id                 String             @id @default(uuid())
  userId             String             @unique // One User per Organizer
  user               User               @relation(fields: [userId], references: [id])
  stripeCustomerId   String?            @unique @map("stripe_customer_id")
  name               String
  slug               String             @unique
  description        String?
  logo               String?
  website            String?
  facebook           String?
  twitter            String?
  instagram          String?
  email              String
  phone              String?
  address            String?
  accountName        String?            @map("account_name")
  accountNumber      String?            @map("account_number")
  bankName           String?            @map("bank_name")
  routingNumber      String?            @map("routing_number")
  verificationStatus VerificationStatus @map("verification_status")
  payoutFrequency    PayoutFrequency    @map("payout_frequency")
  commissionRate     Decimal            @map("commission_rate")
  emailNotifications Boolean            @map("email_notifications")
  smsNotifications   Boolean            @map("sms_notifications")
  pushNotifications  Boolean            @map("push_notifications")
  events             Event[]
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")

  @@index([userId])
  @@map("organizer")
}

// Venue model 
model Venue {
  id             BigInt   @id @default(autoincrement())
  name           String
  slug           String   @unique
  description    String?
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?  @map("postal_code")
  latitude       Decimal?
  longitude      Decimal?
  totalCapacity  Int?     @map("total_capacity")
  amenities      String[]
  parking        Boolean?
  accessibility  Boolean?
  food           Boolean?
  drinks         Boolean?
  images         String[]
  ageRestriction Int?     @map("age_restriction")
  dresscode      String?
  customRules    String[] @map("custom_rules")
  events         Event[]
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("venue")
}

// Event model 
model Event {
  id                 BigInt       @id @default(autoincrement())
  organizerId        String       @map("organizer_id")
  venueId            BigInt       @map("venue_id")
  title              String
  slug               String       @unique
  description        String?
  category           String[]     @map("categories")
  startTime          DateTime     @map("start_time")
  endTime            DateTime     @map("end_time")
  doorsOpen          DateTime     @map("doors_open")
  status             EventStatus
  isPublic           Boolean      @map("is_public")
  requiresApproval   Boolean      @map("requires_approval")
  waitingListEnabled Boolean      @map("waiting_list_enabled")
  refundPolicy       String?      @map("refund_policy")
  approvedById       String?      @map("approved_by_id")
  organizer          Organizer    @relation(fields: [organizerId], references: [id])
  venue              Venue        @relation(fields: [venueId], references: [id])
  approvedBy         User?        @relation("ApprovedBy", fields: [approvedById], references: [id])
  tickets            Ticket[]
  ticketTypes        TicketType[]
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  eventDates         EventDate[]

  @@index([organizerId])
  @@index([approvedById])
  @@map("event")
}

// EventDate model 
model EventDate {
  id        BigInt     @id @default(autoincrement())
  eventId   BigInt     @map("event_id")
  date      DateTime
  event     Event      @relation(fields: [eventId], references: [id])
  timeSlots TimeSlot[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@index([eventId])
  @@map("event_date")
}

// TimeSlot model 
model TimeSlot {
  id          BigInt      @id @default(autoincrement())
  eventDateId BigInt      @map("event_date_id")
  startTime   DateTime    @map("start_time")
  endTime     DateTime    @map("end_time")
  doorsOpen   DateTime    @map("doors_open")
  eventDate   EventDate   @relation(fields: [eventDateId], references: [id])
  tickets     Ticket[]
  inventory   Inventory[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@index([eventDateId])
  @@map("time_slot")
}

// TicketType model 
model TicketType {
  id            BigInt      @id @default(autoincrement())
  eventId       BigInt      @map("event_id")
  name          String
  description   String?
  price         Decimal
  maxPerOrder   Int         @map("max_per_order")
  minPerOrder   Int         @map("min_per_order")
  saleStartTime DateTime    @map("sale_start_time")
  saleEndTime   DateTime    @map("sale_end_time")
  event         Event       @relation(fields: [eventId], references: [id])
  inventory     Inventory[]
  tickets       Ticket[]
  cartItems     CartItem[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@index([eventId])
  @@map("ticket_type")
}

// Inventory model 
model Inventory {
  id           BigInt     @id @default(autoincrement())
  timeSlotId   BigInt     @map("time_slot_id")
  ticketTypeId BigInt     @map("ticket_type_id")
  quantity     Int
  timeSlot     TimeSlot   @relation(fields: [timeSlotId], references: [id])
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([timeSlotId, ticketTypeId])
  @@index([timeSlotId])
  @@index([ticketTypeId])
  @@map("inventory")
}

// Ticket model 
model Ticket {
  id           BigInt       @id @default(autoincrement())
  timeSlotId   BigInt       @map("time_slot_id")
  ticketTypeId BigInt       @map("ticket_type_id")
  orderId      BigInt?      @map("order_id")
  status       TicketStatus
  purchaseDate DateTime?    @map("purchase_date")
  ownerName    String?      @map("owner_name")
  ownerEmail   String?      @map("owner_email")
  ownerPhone   String?      @map("owner_phone")
  qrCode       String       @map("qr_code")
  timeSlot     TimeSlot     @relation(fields: [timeSlotId], references: [id])
  ticketType   TicketType   @relation(fields: [ticketTypeId], references: [id])
  order        Order?       @relation(fields: [orderId], references: [id])
  event        Event?       @relation(fields: [eventId], references: [id])
  eventId      BigInt?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@index([timeSlotId])
  @@index([ticketTypeId])
  @@index([orderId])
  @@map("ticket")
}

// Updated Cart model
model Cart {
  id        String     @id @default(uuid())
  userId    String?    @map("user_id")
  status    CartStatus
  expiresAt DateTime   @map("expires_at")
  cartItems CartItem[]
  user      User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@index([userId])
  @@map("cart")
}

// CartItem model 
model CartItem {
  id           BigInt     @id @default(autoincrement())
  cartId       String     @map("cart_id")
  timeSlotId   BigInt     @map("time_slot_id")
  ticketTypeId BigInt     @map("ticket_type_id")
  quantity     Int
  cart         Cart       @relation(fields: [cartId], references: [id])
  timeSlot     TimeSlot   @relation(fields: [timeSlotId], references: [id])
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([cartId, timeSlotId, ticketTypeId])
  @@index([cartId])
  @@index([timeSlotId])
  @@index([ticketTypeId])
  @@map("cart_item")
}

// Updated Order model
model Order {
  id            BigInt      @id @default(autoincrement())
  userId        String      @map("user_id")
  status        OrderStatus
  totalAmount   Decimal     @map("total_amount")
  paymentMethod String      @map("payment_method")
  transactionId String      @map("transaction_id")
  paymentStatus String      @map("payment_status")
  orderedAt     DateTime    @map("ordered_at")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  user          User        @relation(fields: [userId], references: [id])
  tickets       Ticket[]

  @@index([userId])
  @@map("order")
}

// Enums
enum Role {
  ADMIN
  CUSTOMER
  ORGANIZER
}

enum VerificationStatus {
  pending
  verified
  rejected
}

enum PayoutFrequency {
  weekly
  biweekly
  monthly
}

enum EventStatus {
  draft
  published
  cancelled
  sold_out
}

enum OrderStatus {
  pending
  completed
  cancelled
  refunded
}

enum TicketStatus {
  reserved
  purchased
  cancelled
  used
}

enum CartStatus {
  active
  expired
  converted
  abandoned
}
